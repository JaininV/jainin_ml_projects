I am skipping over many code/concepts in examples which I believe are not MANDATORY to use. My goal is not to create a good application, but to understand the skeletal part required. Anyone can develop skills and improve on them, be it HTML, CSS, Security, Code optimization. I JUST want to post the essentials here. Once I know that the skeletal part if working, I have my peace of mind!In todays post we will try to learn few things about how we can read the user input (like sign in/login data)Lets create an actual html page that will take input from user and submit all the details. It is pretty straight forward (I will leave it to you for reading) This is my SIGNUP PAGE    form “post” signifies that this information will be sent to someone (We will dive deep into this some other time).If you observer, there is relation between label and input, which I don’t need to explain ‘why’? Only thing to consider here is that “for” in label should be same as “id” in input.Fill up the random details and click signup button. Following message will pop out. Don’t worry about that now.Now that we know that out signup page will be providing some information, we make sure that our backend is also aware of it.By default, all web pages have GET request (i.e. retrieve information from HTML and display), but few pages (e.g. login and signup) will provide some information to the system. Process of emitting information is called POST request. It is pretty easy.from flask import Blueprint, render_template, request  #changes madeauth = Blueprint('auth', __name__)@auth.route('/login')def login():    return render_template("login.html")@auth.route('/logout')def logout():    return render_template("logout.html")@auth.route('/signup', methods=['GET', 'POST'])  #changes madedef signup():    return render_template("signup.html")Now if you go to signup page ( http://127.0.0.1:5000/signup in my case), and fill up the form to submit, you will see that your page gets refreshed and no longer throwing previous error of ‘Method Not Allowed’.when you visit any page -> it is a GET requestwhen you click submit -> it is POST requestLets quickly make the same changes for login page as well. It is also supposed to have POST request. This page will send username and password and our backend will then verify it. This is my LOGIN PAGEMake sure that “id” of password here is different from the signup pagefrom flask import Blueprint, render_template, requestauth = Blueprint('auth', __name__)@auth.route('/login', methods=['GET','POST'])def login():    return render_template("login.html")@auth.route('/logout')def logout():    return render_template("logout.html")@auth.route('/signup', methods=['GET', 'POST'])def signup():    return render_template("signup.html")We will modify our backend to read the data that is posted by login and signup page.One way to make sure that the post request is being sent correctly, is using “flash”. It is a feature of flask to show a message on top of the page.You need to add only 3 lines of code. First, you import flash and then you call flash function.from flask import Blueprint, render_template, request, flash #chagnes madeauth = Blueprint('auth', __name__)@auth.route('/login', methods=['GET','POST'])def login():    if request.method == 'POST':           #chagnes made        flash('successfully logged in')    #chagnes made    return render_template("login.html")@auth.route('/signup', methods=['GET', 'POST'])def signup():    return render_template("signup.html")@auth.route('/logout')def logout():    return render_template("logout.html")Explanation -> Whenever, this page sends a POST request, we want to flash the message “successfully logged in”.DOUBT : Where will this be displayed? We have written this in python (on backend), thus we need to have provisions in our front end code (HTML). For this we use JINJA.May sound scary, but we don’t have to do any installations for this. It’s just a syntax to write python code in HTMLJust make sure that you understand following 2 syntax“{{ }}” is used for rendering data in the outputThe value of x is {{ x }}2. “{% %}” is used for controlling the rendering of the template.{% if x > 0 %}  {% else %}  {% endif %}{% with messages = get_flashed_messages(with_categorys=true) %}{% endwith %}get_flashed_messages -> it is a built-in function in flash that will capture all the messages that we flash in our backend.{% with messages = get_flashed_messages() %}         {% if messages %}            {% for message in messages %}                             {% endfor %}         {% endif %}     {% endwith %}If you read it carefully, it is pretty evident what we are doing.“messages” will capture all the messages that are flashed in backend.if there are any messages, then we will loop through (using FOR-loop) all messages and display it. (I have used paragraph syntax  of HTML, you can use anything you like). Make sure that you close all the conditions.

Below is our final login.html code

{% with messages = get_flashed_messages() %}         {% if messages %}            {% for message in messages %}                             {% endfor %}         {% endif %}     {% endwith %}

Run the application from main.py, go to login page. Enter the details and click login button. You should see “successfully logged in” message.

PS : I had so many codes and tabs open that I lost the flow. Please comment if you have any difficulty.

You can add a block where you can use python way to display few things

{% block content %} BASE CONTENT THAT CAN BE OVERRRIDEN {% endblock %}

Following will copy the entire base.html file and we can then override the block.

{% extends "base.html" %}

If I want to add javascript, below is the format